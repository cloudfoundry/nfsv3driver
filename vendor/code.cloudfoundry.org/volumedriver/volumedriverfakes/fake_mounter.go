// Code generated by counterfeiter. DO NOT EDIT.
package volumedriverfakes

import (
	"sync"

	"code.cloudfoundry.org/dockerdriver"
	"code.cloudfoundry.org/volumedriver"
)

type FakeMounter struct {
	CheckStub        func(dockerdriver.Env, string, string) bool
	checkMutex       sync.RWMutex
	checkArgsForCall []struct {
		arg1 dockerdriver.Env
		arg2 string
		arg3 string
	}
	checkReturns struct {
		result1 bool
	}
	checkReturnsOnCall map[int]struct {
		result1 bool
	}
	MountStub        func(dockerdriver.Env, string, string, map[string]interface{}) error
	mountMutex       sync.RWMutex
	mountArgsForCall []struct {
		arg1 dockerdriver.Env
		arg2 string
		arg3 string
		arg4 map[string]interface{}
	}
	mountReturns struct {
		result1 error
	}
	mountReturnsOnCall map[int]struct {
		result1 error
	}
	PurgeStub        func(dockerdriver.Env, string)
	purgeMutex       sync.RWMutex
	purgeArgsForCall []struct {
		arg1 dockerdriver.Env
		arg2 string
	}
	UnmountStub        func(dockerdriver.Env, string) error
	unmountMutex       sync.RWMutex
	unmountArgsForCall []struct {
		arg1 dockerdriver.Env
		arg2 string
	}
	unmountReturns struct {
		result1 error
	}
	unmountReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMounter) Check(arg1 dockerdriver.Env, arg2 string, arg3 string) bool {
	fake.checkMutex.Lock()
	ret, specificReturn := fake.checkReturnsOnCall[len(fake.checkArgsForCall)]
	fake.checkArgsForCall = append(fake.checkArgsForCall, struct {
		arg1 dockerdriver.Env
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.CheckStub
	fakeReturns := fake.checkReturns
	fake.recordInvocation("Check", []interface{}{arg1, arg2, arg3})
	fake.checkMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMounter) CheckCallCount() int {
	fake.checkMutex.RLock()
	defer fake.checkMutex.RUnlock()
	return len(fake.checkArgsForCall)
}

func (fake *FakeMounter) CheckCalls(stub func(dockerdriver.Env, string, string) bool) {
	fake.checkMutex.Lock()
	defer fake.checkMutex.Unlock()
	fake.CheckStub = stub
}

func (fake *FakeMounter) CheckArgsForCall(i int) (dockerdriver.Env, string, string) {
	fake.checkMutex.RLock()
	defer fake.checkMutex.RUnlock()
	argsForCall := fake.checkArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeMounter) CheckReturns(result1 bool) {
	fake.checkMutex.Lock()
	defer fake.checkMutex.Unlock()
	fake.CheckStub = nil
	fake.checkReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeMounter) CheckReturnsOnCall(i int, result1 bool) {
	fake.checkMutex.Lock()
	defer fake.checkMutex.Unlock()
	fake.CheckStub = nil
	if fake.checkReturnsOnCall == nil {
		fake.checkReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.checkReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeMounter) Mount(arg1 dockerdriver.Env, arg2 string, arg3 string, arg4 map[string]interface{}) error {
	fake.mountMutex.Lock()
	ret, specificReturn := fake.mountReturnsOnCall[len(fake.mountArgsForCall)]
	fake.mountArgsForCall = append(fake.mountArgsForCall, struct {
		arg1 dockerdriver.Env
		arg2 string
		arg3 string
		arg4 map[string]interface{}
	}{arg1, arg2, arg3, arg4})
	stub := fake.MountStub
	fakeReturns := fake.mountReturns
	fake.recordInvocation("Mount", []interface{}{arg1, arg2, arg3, arg4})
	fake.mountMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMounter) MountCallCount() int {
	fake.mountMutex.RLock()
	defer fake.mountMutex.RUnlock()
	return len(fake.mountArgsForCall)
}

func (fake *FakeMounter) MountCalls(stub func(dockerdriver.Env, string, string, map[string]interface{}) error) {
	fake.mountMutex.Lock()
	defer fake.mountMutex.Unlock()
	fake.MountStub = stub
}

func (fake *FakeMounter) MountArgsForCall(i int) (dockerdriver.Env, string, string, map[string]interface{}) {
	fake.mountMutex.RLock()
	defer fake.mountMutex.RUnlock()
	argsForCall := fake.mountArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeMounter) MountReturns(result1 error) {
	fake.mountMutex.Lock()
	defer fake.mountMutex.Unlock()
	fake.MountStub = nil
	fake.mountReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMounter) MountReturnsOnCall(i int, result1 error) {
	fake.mountMutex.Lock()
	defer fake.mountMutex.Unlock()
	fake.MountStub = nil
	if fake.mountReturnsOnCall == nil {
		fake.mountReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.mountReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMounter) Purge(arg1 dockerdriver.Env, arg2 string) {
	fake.purgeMutex.Lock()
	fake.purgeArgsForCall = append(fake.purgeArgsForCall, struct {
		arg1 dockerdriver.Env
		arg2 string
	}{arg1, arg2})
	stub := fake.PurgeStub
	fake.recordInvocation("Purge", []interface{}{arg1, arg2})
	fake.purgeMutex.Unlock()
	if stub != nil {
		fake.PurgeStub(arg1, arg2)
	}
}

func (fake *FakeMounter) PurgeCallCount() int {
	fake.purgeMutex.RLock()
	defer fake.purgeMutex.RUnlock()
	return len(fake.purgeArgsForCall)
}

func (fake *FakeMounter) PurgeCalls(stub func(dockerdriver.Env, string)) {
	fake.purgeMutex.Lock()
	defer fake.purgeMutex.Unlock()
	fake.PurgeStub = stub
}

func (fake *FakeMounter) PurgeArgsForCall(i int) (dockerdriver.Env, string) {
	fake.purgeMutex.RLock()
	defer fake.purgeMutex.RUnlock()
	argsForCall := fake.purgeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMounter) Unmount(arg1 dockerdriver.Env, arg2 string) error {
	fake.unmountMutex.Lock()
	ret, specificReturn := fake.unmountReturnsOnCall[len(fake.unmountArgsForCall)]
	fake.unmountArgsForCall = append(fake.unmountArgsForCall, struct {
		arg1 dockerdriver.Env
		arg2 string
	}{arg1, arg2})
	stub := fake.UnmountStub
	fakeReturns := fake.unmountReturns
	fake.recordInvocation("Unmount", []interface{}{arg1, arg2})
	fake.unmountMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMounter) UnmountCallCount() int {
	fake.unmountMutex.RLock()
	defer fake.unmountMutex.RUnlock()
	return len(fake.unmountArgsForCall)
}

func (fake *FakeMounter) UnmountCalls(stub func(dockerdriver.Env, string) error) {
	fake.unmountMutex.Lock()
	defer fake.unmountMutex.Unlock()
	fake.UnmountStub = stub
}

func (fake *FakeMounter) UnmountArgsForCall(i int) (dockerdriver.Env, string) {
	fake.unmountMutex.RLock()
	defer fake.unmountMutex.RUnlock()
	argsForCall := fake.unmountArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMounter) UnmountReturns(result1 error) {
	fake.unmountMutex.Lock()
	defer fake.unmountMutex.Unlock()
	fake.UnmountStub = nil
	fake.unmountReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMounter) UnmountReturnsOnCall(i int, result1 error) {
	fake.unmountMutex.Lock()
	defer fake.unmountMutex.Unlock()
	fake.UnmountStub = nil
	if fake.unmountReturnsOnCall == nil {
		fake.unmountReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unmountReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMounter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkMutex.RLock()
	defer fake.checkMutex.RUnlock()
	fake.mountMutex.RLock()
	defer fake.mountMutex.RUnlock()
	fake.purgeMutex.RLock()
	defer fake.purgeMutex.RUnlock()
	fake.unmountMutex.RLock()
	defer fake.unmountMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMounter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ volumedriver.Mounter = new(FakeMounter)
